#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const http = require('http');
const https = require('https');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || CONFIG.app.port);
app.set('port', port);
let server;

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
if (process.env.NODE_ENV == 'development' || process.env.NODE_ENV == 'production') {
    console.log('has environment')

    if (CONFIG.sslSettings.key && CONFIG.sslSettings.cert) {
        const options = {
            key: LIBRARY.fs.readFileSync(CONFIG.sslSettings.key).toString(),
            cert: LIBRARY.fs.readFileSync(CONFIG.sslSettings.cert).toString()
        };

        https.createServer(options, app).listen(443, function () {
            console.log('Secure App is listening on secure port 443');
        });
    }

    server = http.createServer(function (req, res) {
        // console.log('App is listening to port ' + port);
        res.writeHead(301, {
            "Location": "https://" + req.headers['host'] + req.url
        });
        res.end();
    }).listen(port);

    server.on('error', onError);
    server.on('listening', onListening);
} else {
    server = http.createServer(app).listen(port, function () {
        // console.log('App is listening to port ' + port);
    });

    server.on('error', onError);
    server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`App is running on port ${addr.port}`)
}
